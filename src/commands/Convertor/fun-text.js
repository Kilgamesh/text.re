const { SlashCommandBuilder } = require('discord.js');

const superscriptMap = {
	'A': '·¥¨', 'B': '·¥Æ', 'C': '·∂ú', 'D': '·¥∞', 'E': '·¥±', 'F': '·∂†', 'G': '·¥≥', 'H': '·¥¥', 'I': '·¥µ', 'J': '·¥∂',
	'K': '·¥∑', 'L': '·¥∏', 'M': '·¥π', 'N': '·¥∫', 'O': '·¥º', 'P': '·¥æ', 'Q': '·µ†', 'R': '·¥ø', 'S': 'À¢', 'T': '·µÄ',
	'U': '·µÅ', 'V': '‚±Ω', 'W': '·µÇ', 'X': 'À£', 'Y': ' ∏', 'Z': '·∂ª',
	'a': '·µÉ', 'b': '·µá', 'c': '·∂ú', 'd': '·µà', 'e': '·µâ', 'f': '·∂†', 'g': '·µç', 'h': ' ∞', 'i': '‚Å±', 'j': ' ≤',
	'k': '·µè', 'l': 'À°', 'm': '·µê', 'n': '‚Åø', 'o': '·µí', 'p': '·µñ', 'q': '·µ†', 'r': ' ≥', 's': 'À¢', 't': '·µó',
	'u': '·µò', 'v': '·µõ', 'w': ' ∑', 'x': 'À£', 'y': ' ∏', 'z': '·∂ª',
	'0': '‚Å∞', '1': '¬π', '2': '¬≤', '3': '¬≥', '4': '‚Å¥', '5': '‚Åµ', '6': '‚Å∂', '7': '‚Å∑', '8': '‚Å∏', '9': '‚Åπ',
	'+': '‚Å∫', '-': '‚Åª', '=': '‚Åº', '(': '‚ÅΩ', ')': '‚Åæ', '/': '‚ÅÑ', ' ': ' ',
	'!': '·µé', '@': '·∂ø', '#': '·∂ª', '$': '‚Çç', '%': '‚Ä∞', '^': '·∂Ø', '&': '‚Åæ', '*': '‚àó', '_': '‚Çã', '`': '·µû',
	'{': '‚Åæ', '}': '‚Åæ', '[': '‚Åæ', ']': '‚Åæ', '|': '·µö', ';': '‚Åª', ':': '·µï', ',': 'À≥', '.': ' ≥', '<': '‚Äπ',
	'>': '‚Ä∫', '?': 'ÀÄ', '/': '‚∏¢', '\\': '‚∏•', "'": '·µé', '"': 'À∂',
};

const subscriptMap = {
	'A': '‚Çê', 'B': '‚Çë', 'C': '‚Çí', 'D': '‚Çí', 'E': '‚Çë', 'F': '‚Çë', 'G': '‚Çï', 'H': '·µ¢', 'I': '‚±º', 'J': '‚Çñ',
	'K': '‚Çñ', 'L': '‚Çó', 'M': '‚Çò', 'N': '‚Çô', 'O': '‚Çí', 'P': '‚Çö', 'Q': '·µ£', 'R': '·µ§', 'S': '‚Çõ', 'T': '‚Çú',
	'U': '·µ§', 'V': '·µ•', 'W': '‚Çì', 'X': '‚Çì', 'Y': '·µß', 'Z': '‚ÇÇ',
	'a': '‚Çê', 'b': '‚Çë', 'c': '‚Çí', 'd': '‚Çí', 'e': '‚Çë', 'f': '‚Çë', 'g': '‚Çï', 'h': '·µ¢', 'i': '‚±º', 'j': '‚Çñ',
	'k': '‚Çñ', 'l': '‚Çó', 'm': '‚Çò', 'n': '‚Çô', 'o': '‚Çí', 'p': '‚Çö', 'q': '·µ£', 'r': '·µ§', 's': '‚Çõ', 't': '‚Çú',
	'u': '·µ§', 'v': '·µ•', 'w': '‚Çì', 'x': '‚Çì', 'y': '·µß', 'z': '‚ÇÇ',
	'0': '‚ÇÄ', '1': '‚ÇÅ', '2': '‚ÇÇ', '3': '‚ÇÉ', '4': '‚ÇÑ', '5': '‚ÇÖ', '6': '‚ÇÜ', '7': '‚Çá', '8': '‚Çà', '9': '‚Çâ',
	'+': '‚Çä', '-': '‚Çã', '=': '‚Çå', '(': '‚Çç', ')': '‚Çé', '/': '‚Çã', ' ': ' ',
	'!': '·µé', '@': '‚Çê', '#': '‚Çï', '$': '‚Çö', '%': 'Íú•', '^': '·µ§', '&': '‚Çã', '*': '‚Çä', '_': '‚Çã', '`': '·µû',
	'{': '‚Çé', '}': '‚Çé', '[': '‚Çé', ']': '‚Çé', '|': '‚Çé', ';': '‚Çã', ':': '‚Çé', ',': '‚Çç', '.': '·µ£', '<': '‚Çé',
	'>': '‚Çé', '?': '‚Çç', '/': '‚∏¢', '\\': '‚∏•', "'": '‚Çë', '"': '‚Çë',
};

const frakturMap = {
	'A': 'ùîÑ', 'B': 'ùîÖ', 'C': '‚Ñ≠', 'D': 'ùîá', 'E': 'ùîà', 'F': 'ùîâ', 'G': 'ùîä', 'H': '‚Ñå', 'I': '‚Ñë', 'J': 'ùîç',
	'K': 'ùîé', 'L': 'ùîè', 'M': 'ùîê', 'N': 'ùîë', 'O': 'ùîí', 'P': 'ùîì', 'Q': 'ùîî', 'R': '‚Ñú', 'S': 'ùîñ', 'T': 'ùîó',
	'U': 'ùîò', 'V': 'ùîô', 'W': 'ùîö', 'X': 'ùîõ', 'Y': 'ùîú', 'Z': '‚Ñ®',
	'a': 'ùîû', 'b': 'ùîü', 'c': 'ùî†', 'd': 'ùî°', 'e': 'ùî¢', 'f': 'ùî£', 'g': 'ùî§', 'h': 'ùî•', 'i': 'ùî¶', 'j': 'ùîß',
	'k': 'ùî®', 'l': 'ùî©', 'm': 'ùî™', 'n': 'ùî´', 'o': 'ùî¨', 'p': 'ùî≠', 'q': 'ùîÆ', 'r': 'ùîØ', 's': 'ùî∞', 't': 'ùî±',
	'u': 'ùî≤', 'v': 'ùî≥', 'w': 'ùî¥', 'x': 'ùîµ', 'y': 'ùî∂', 'z': 'ùî∑'
};

const cursiveMap = {
	'A': 'ùìê', 'B': 'ùìë', 'C': 'ùìí', 'D': 'ùìì', 'E': 'ùìî', 'F': 'ùìï', 'G': 'ùìñ', 'H': 'ùìó', 'I': 'ùìò', 'J': 'ùìô',
	'K': 'ùìö', 'L': 'ùìõ', 'M': 'ùìú', 'N': 'ùìù', 'O': 'ùìû', 'P': 'ùìü', 'Q': 'ùì†', 'R': 'ùì°', 'S': 'ùì¢', 'T': 'ùì£',
	'U': 'ùì§', 'V': 'ùì•', 'W': 'ùì¶', 'X': 'ùìß', 'Y': 'ùì®', 'Z': 'ùì©',
	'a': 'ùì™', 'b': 'ùì´', 'c': 'ùì¨', 'd': 'ùì≠', 'e': 'ùìÆ', 'f': 'ùìØ', 'g': 'ùì∞', 'h': 'ùì±', 'i': 'ùì≤', 'j': 'ùì≥',
	'k': 'ùì¥', 'l': 'ùìµ', 'm': 'ùì∂', 'n': 'ùì∑', 'o': 'ùì∏', 'p': 'ùìπ', 'q': 'ùì∫', 'r': 'ùìª', 's': 'ùìº', 't': 'ùìΩ',
	'u': 'ùìæ', 'v': 'ùìø', 'w': 'ùîÄ', 'x': 'ùîÅ', 'y': 'ùîÇ', 'z': 'ùîÉ',
	'0': 'ùüé', '1': 'ùüè', '2': 'ùüê', '3': 'ùüë', '4': 'ùüí', '5': 'ùüì', '6': 'ùüî', '7': 'ùüï', '8': 'ùüñ', '9': 'ùüó'
};

const greekMap = {
	'a': 'Œ±', 'b': 'Œ≤', 'c': 'œÇ', 'd': 'Œ¥', 'e': 'Œµ',
	'f': 'œÜ', 'g': 'Œ≥', 'h': 'œá', 'i': 'Œπ', 'j': 'œÇ',
	'k': 'œá', 'l': 'Œ∫', 'm': 'Œª', 'n': 'Œº', 'o': 'ŒΩ',
	'p': 'Œø', 'q': 'œÄ', 'r': 'Œ∫', 's': 'œÖ', 't': 'œÅ',
	'u': 'œÉ', 'v': 'œÑ', 'w': 'œÖ', 'x': 'œÜ', 'y': 'œÖ',
	'z': 'Œæ',
	'A': 'Œë', 'B': 'Œí', 'C': 'Œ£', 'D': 'Œî', 'E': 'Œï',
	'F': 'Œ¶', 'G': 'Œì', 'H': 'Œß', 'I': 'Œô', 'J': 'Œ£',
	'K': 'Œß', 'L': 'Œö', 'M': 'Œõ', 'N': 'Œú', 'O': 'Œù',
	'P': 'Œü', 'Q': 'Œ†', 'R': 'Œö', 'S': 'Œ•', 'T': 'Œ°',
	'U': 'Œ£', 'V': 'Œ§', 'W': 'Œ•', 'X': 'Œ¶', 'Y': 'Œ•',
	'Z': 'Œû',
};

const smallCapsMap = {
	'A': '·¥Ä', 'B': ' ô', 'C': '·¥Ñ', 'D': '·¥Ö', 'E': '·¥á',
	'F': 'Íú∞', 'G': '…¢', 'H': ' ú', 'I': '…™', 'J': '·¥ä',
	'K': '·¥ã', 'L': ' ü', 'M': '·¥ç', 'N': '…¥', 'O': '·¥è',
	'P': '·¥ò', 'Q': '«´', 'R': ' Ä', 'S': 's', 'T': '·¥õ',
	'U': '·¥ú', 'V': '·¥†', 'W': '·¥°', 'X': 'x', 'Y': ' è',
	'Z': '·¥¢',
};

const mathScript = {
	'a': 'ùïí', 'b': 'ùïì', 'c': 'ùïî', 'd': 'ùïï', 'e': 'ùïñ',
	'f': 'ùïó', 'g': 'ùïò', 'h': 'ùïô', 'i': 'ùïö', 'j': 'ùïõ',
	'k': 'ùïú', 'l': 'ùïù', 'm': 'ùïû', 'n': 'ùïü', 'o': 'ùï†',
	'p': 'ùï°', 'q': 'ùï¢', 'r': 'ùï£', 's': 'ùï§', 't': 'ùï•',
	'u': 'ùï¶', 'v': 'ùïß', 'w': 'ùï®', 'x': 'ùï©', 'y': 'ùï™',
	'z': 'ùï´',
	'A': 'ùî∏', 'B': 'ùîπ', 'C': '‚ÑÇ', 'D': 'ùîª', 'E': 'ùîº',
	'F': 'ùîΩ', 'G': 'ùîæ', 'H': '‚Ñç', 'I': 'ùïÄ', 'J': 'ùïÅ',
	'K': 'ùïÇ', 'L': 'ùïÉ', 'M': 'ùïÑ', 'N': '‚Ñï', 'O': 'ùïÜ',
	'P': '‚Ñô', 'Q': '‚Ñö', 'R': '‚Ñù', 'S': 'ùïä', 'T': 'ùïã',
	'U': 'ùïå', 'V': 'ùïç', 'W': 'ùïé', 'X': 'ùïè', 'Y': 'ùïê',
	'Z': '‚Ñ§',
};

const upsideDown = {
	'a': '…í', 'b': 'q', 'c': '…î', 'd': 'p', 'e': '«ù',
	'f': '…ü', 'g': '∆É', 'h': '…•', 'i': '·¥â', 'j': '…æ',
	'k': ' û', 'l': 'l', 'm': '…Ø', 'n': 'u', 'o': 'o',
	'p': 'd', 'q': 'b', 'r': '…π', 's': 's', 't': ' á',
	'u': 'n', 'v': ' å', 'w': ' ç', 'x': 'x', 'y': ' é',
	'z': 'z',
	'A': '‚àÄ', 'B': 'êêí', 'C': '∆Ü', 'D': '·ó°', 'E': '∆é',
	'F': '‚Ñ≤', 'G': '◊§', 'H': 'H', 'I': 'I', 'J': '≈ø',
	'K': 'K', 'L': 'À•', 'M': 'W', 'N': 'N', 'O': 'O',
	'P': '‘Ä', 'Q': 'Íìµ', 'R': 'Íì∑', 'S': 'Íì®', 'T': 'Íì§',
	'U': '‚à©', 'V': 'Œõ', 'W': 'M', 'X': 'X', 'Y': '‚ÖÑ',
	'Z': 'Z',
};

const textBox = {
  'A': 'üÑ∞', 'B': 'üÑ±', 'C': 'üÑ≤', 'D': 'üÑ≥', 'E': 'üÑ¥',
  'F': 'üÑµ', 'G': 'üÑ∂', 'H': 'üÑ∑', 'I': 'üÑ∏', 'J': 'üÑπ',
  'K': 'üÑ∫', 'L': 'üÑª', 'M': 'üÑº', 'N': 'üÑΩ', 'O': 'üÑæ',
  'P': 'üÑø', 'Q': 'üÖÄ', 'R': 'üÖÅ', 'S': 'üÖÇ', 'T': 'üÖÉ',
  'U': 'üÖÑ', 'V': 'üÖÖ', 'W': 'üÖÜ', 'X': 'üÖá', 'Y': 'üÖà',
  'Z': 'üÖâ',
};

const whiteTextBox = {
	'A': 'üÖ∞', 'B': 'üÖ±', 'C': 'üÖ≤', 'D': 'üÖ≥', 'E': 'üÖ¥',
	'F': 'üÖµ', 'G': 'üÖ∂', 'H': 'üÖ∑', 'I': 'üÖ∏', 'J': 'üÖπ',
	'K': 'üÖ∫', 'L': 'üÖª', 'M': 'üÖº', 'N': 'üÖΩ', 'O': 'üÖæ',
	'P': 'üÖø', 'Q': 'üÜÄ', 'R': 'üÜÅ', 'S': 'üÜÇ', 'T': 'üÜÉ',
	'U': 'üÜÑ', 'V': 'üÜÖ', 'W': 'üÜÜ', 'X': 'üÜá', 'Y': 'üÜà',
	'Z': 'üÜâ',
};

const borderText = {
	'A': '„ÄéA„Äè', 'B': '„ÄéB„Äè', 'C': '„ÄéC„Äè', 'D': '„ÄéD„Äè', 'E': '„ÄéE„Äè',
	'F': '„ÄéF„Äè', 'G': '„ÄéG„Äè', 'H': '„ÄéH„Äè', 'I': '„ÄéI„Äè', 'J': '„ÄéJ„Äè',
	'K': '„ÄéK„Äè', 'L': '„ÄéL„Äè', 'M': '„ÄéM„Äè', 'N': '„ÄéN„Äè', 'O': '„ÄéO„Äè',
	'P': '„ÄéP„Äè', 'Q': '„ÄéQ„Äè', 'R': '„ÄéR„Äè', 'S': '„ÄéS„Äè', 'T': '„ÄéT„Äè',
	'U': '„ÄéU„Äè', 'V': '„ÄéV„Äè', 'W': '„ÄéW„Äè', 'X': '„ÄéX„Äè', 'Y': '„ÄéY„Äè',
	'Z': '„ÄéZ„Äè',
};



module.exports = {
	data: new SlashCommandBuilder()
	.setName('fun-text')
	.setDescription('Create cool text.')
	.addStringOption(option => 
		option
		.setName('style')
		.setDescription('The style of text to convert.')
		.setRequired(true)
		.addChoices(
			{ name: "À¢·µò·µñ·µâ ≥À¢·∂ú ≥‚Å±·µñ·µó", value: "superscript" },
			{ name: "‚Çõ·µ§b‚ÇõÍúÄ·µ£·µ¢‚Çö‚Çú", value: "subscript" },
			{ name: "s·¥ç·¥Ä ü ü·¥Ñ·¥Ä·¥òs", value: "smallcaps" },
			{ name: "ùï•ùïñùï©ùï•ùïìùï†ùï©", value: "best" },
			{ name: "ùñãùñóùñÜùñêùñôùñöùñó", value: "fraktur" },
			{ name: "ùì¨ùìæùìªùìºùì≤ùìøùìÆ", value: "cursive" },
			{ name: "Œ≥œÅŒµŒµŒ∫", value: "greek" },
			{ name: "u çop-«ùpƒ±sdn", value: "upsidedown" },
			{ name: "„Äét„Äè„Äée„Äè„Äéx„Äè„Äét„Äè„Äéb„Äè„Äéo„Äè„Äéx„Äè", value: "bordertext" },
			{ name: "üÖÉüÑ¥üÖáüÖÉüÑ±üÑæüÖá", value: "textbox" },
			{ name: "üÜÉüÖ¥üÜáüÜÉüÖ±üÖæüÜá", value: "whitetextbox" }
		),
	)
	.addStringOption(option => option
		.setName('text')
		.setDescription('The text to convert.')
		.setMaxLength(280)
		.setRequired(true)
	),
	async execute(interaction) {
		const style = interaction.options.getString("style");
		const text = interaction.options.getString('text');

		switch (style) {
			case 'superscript':
				interaction.reply(
					text
					.split('')
					.map((char) => superscriptMap[char] || char)
					.join('')
				);
				break;
			case 'subscript':
				interaction.reply({ content: 
					text
					.split('')
					.map((char) => subscriptMap[char] || char)
					.join('') 
				});
				break;
			case 'fraktur':
				interaction.reply(
					text.split('')
					.map((char) => frakturMap[char] || char)
					.join('')
				);
				break;
			case 'fancy':
				interaction.reply(
					text.split('')
					.map((char) => cursiveMap[char] || char)
					.join('')
				)
				break;
			case 'greek':
				interaction.reply(
					text.split('')
					.map((char) => greekMap[char] || char)
					.join('')
				)
				break;
			case 'smallcaps':
				interaction.reply(
					text.split('')
					.map((char) => smallCapsMap[char] || char)
					.join('')
				)
				break;
			case 'upsidedown':
				interaction.reply(
					text.split('')
					.map((char) => upsideDown[char] || char)
					.join('')
				)
				break;
			case 'textbox':
				interaction.reply(
					text.split('')
					.map((char) => textBox[char] || char)
					.join('')
				)
				break;
			case 'whitetextbox':
				interaction.reply(
					text.split('')
					.map((char) => whiteTextBox[char] || char)
					.join('')
				)
				break;
			case 'bordertext':
				interaction.reply(
					text.split('')
					.map((char) => borderText[char] || char)
					.join('')
				)
				break;
			case 'best':
				interaction.reply(
					text.split('')
					.map((char) => mathScript[char] || char)
					.join('')
				)
				break;
			default:
				interaction.reply('Invalid subcommand.');
				break;
		}
		
	}
}